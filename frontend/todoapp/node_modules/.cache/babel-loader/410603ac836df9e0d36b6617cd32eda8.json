{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  loginSucceed(username, password) {\n    // let username = 'gaby'\n    // let password = 'hello123'\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  createBasicAuthToken(username, password) {\n    console.log(username);\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      console.log(token);\n\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n        console.log(token);\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","loginSucceed","username","password","sessionStorage","setItem","setupAxiosInterceptors","createBasicAuthToken","logout","removeItem","isUserLogin","user","getItem","getLoggedInUserName","console","log","window","btoa","token","interceptors","request","use","config","isUserLoggedIn","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,YAAY,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC7B;AACA;AAEAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,sBAAL,CAA4B,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrCW,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACA,WAAO,WAAWc,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDG,EAAAA,sBAAsB,CAACY,KAAD,EAAQ;AAC1BnB,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRR,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;;AACA,UAAI,KAAKK,cAAL,EAAJ,EAA2B;AACvBD,QAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+BP,KAA/B;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;;AACD,aAAOI,MAAP;AACH,KARL;AAUH;;AA1CuB;;AA8C5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n\n    loginSucceed(username, password) {\n        // let username = 'gaby'\n        // let password = 'hello123'\n\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLogin() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return ''\n        return user\n    }\n\n    createBasicAuthToken(username, password) {\n        console.log(username)\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                console.log(token)\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                    console.log(token)\n                }\n                return config\n            }\n        )\n    }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}