{"ast":null,"code":"var _jsxFileName = \"/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/TodoComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport AuthenticationService from './AuthenticationService';\nimport TodoService from '../../api/todo/TodoService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoComponent() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [description, setDescription] = useState('');\n  const [targetDate, setTargetDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n  const navigate = useNavigate();\n\n  const onSubmit = values => {\n    let username = AuthenticationService.getLoggedInUserName();\n    let todo = {\n      id: id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n\n    if (id === -1) {\n      TodoService.createTodo(username, todo).then(() => navigate('/todos'));\n    } else {\n      TodoService.updateTodo(username, id, todo).then(() => navigate('/todos'));\n    }\n\n    console.log(values);\n  };\n\n  const validate = values => {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = 'Enter a Description';\n    } else if (values.description.length < 5) {\n      errors.description = 'Enter atleast 5 Characters in Description';\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = 'Enter a valid Target Date';\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          description,\n          targetDate\n        },\n        onSubmit: onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: validate,\n        enableReinitialize: true,\n        children: props => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"description\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"targetDate\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"text\",\n              name: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Target Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"date\",\n              name: \"targetDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoComponent, \"ESU/uopNXeoepUeji3HdVEgq+UE=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = TodoComponent;\nexport default TodoComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoComponent\");","map":{"version":3,"sources":["/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/TodoComponent.js"],"names":["React","useState","useParams","useNavigate","moment","Formik","Form","Field","ErrorMessage","AuthenticationService","TodoService","TodoComponent","id","description","setDescription","targetDate","setTargetDate","Date","format","navigate","onSubmit","values","username","getLoggedInUserName","todo","createTodo","then","updateTodo","console","log","validate","errors","length","isValid","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport AuthenticationService from './AuthenticationService';\nimport TodoService from '../../api/todo/TodoService';\n\nfunction TodoComponent() {\n\n    const {id} = useParams();\n    const [description, setDescription] = useState('');\n    const [targetDate, setTargetDate] = useState(moment(new Date()).format('YYYY-MM-DD'));\n\n    const navigate = useNavigate();\n\n    const onSubmit = (values) => {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let todo = {\n            id: id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        if (id === -1) {\n            TodoService.createTodo(username, todo)\n                .then(() => navigate('/todos'))\n        } else {\n            TodoService.updateTodo(username, id, todo)\n                .then(() => navigate('/todos'))\n        }\n\n        console.log(values);\n\n    }\n\n    const validate = (values) => {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = 'Enter a valid Target Date'\n        }\n\n        return errors\n    }\n\n    return (\n        <div>\n        <h1>Todo</h1>\n        <div className='container'>\n            <Formik \n                initialValues={{ description, targetDate }}\n                onSubmit={onSubmit}\n                validateOnChange={false}\n                validateOnBlur={false}\n                validate={validate}\n                enableReinitialize={true} >\n                {\n                    (props) => (\n                        <Form>\n                            <ErrorMessage name=\"description\" component=\"div\"\n                                className=\"alert alert-warning\" />\n                            <ErrorMessage name=\"targetDate\" component=\"div\"\n                                className=\"alert alert-warning\" />\n                            <fieldset className='form-group'>\n                                <label>Description</label>\n                                <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                            </fieldset>\n                            <fieldset className='form-group'>\n                                <label>Target Date</label>\n                                <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\n                            </fieldset>\n                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                        </Form>\n                    )\n                }\n            </Formik>\n        </div>\n    </div>\n    );\n}\n\nexport default TodoComponent;\n"]},"metadata":{},"sourceType":"module"}