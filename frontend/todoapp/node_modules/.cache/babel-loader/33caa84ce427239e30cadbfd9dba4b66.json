{"ast":null,"code":"var _jsxFileName = \"/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/TodoComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport TodoService from \"../../api/todo/TodoService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoComponent() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  console.log(id);\n  const [state, setState] = useState({\n    id: id,\n    description: \"Test\",\n    targetDate: moment(new Date()).format(\"YYYY-MM-DD\")\n  });\n  const navigate = useNavigate();\n\n  const onSubmit = values => {\n    let username = AuthenticationService.getLoggedInUserName(); // let todo = {\n    //     id: state.id,\n    //     description: values.description,\n    //     targetDate: values.targetDate\n    // }\n\n    let todo = {};\n\n    if (state.id === -1) {\n      todo = {\n        description: values.description,\n        targetDate: values.targetDate\n      };\n      TodoService.createTodo(username, todo).then(() => navigate(\"/todos\"));\n    } else {\n      todo = {\n        id: state.id,\n        description: values.description,\n        targetDate: values.targetDate\n      };\n      TodoService.updateTodo(username, state.id, todo).then(() => navigate(\"/todos\"));\n    }\n  };\n\n  const validate = values => {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a Description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter atleast 5 Characters in Description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid Target Date\";\n    }\n\n    return errors;\n  };\n\n  useEffect(() => {\n    if (id == -1) {\n      console.log(id);\n      return;\n    } else {\n      let username = AuthenticationService.getLoggedInUserName();\n      TodoService.getTodo(username, state.id).then(response => {\n        setState({ ...state,\n          description: response.data.description,\n          targetDate: moment(response.data.targetDate).format(\"YYYY-MM-DD\")\n        });\n      });\n    }\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          description: state.description,\n          targetDate: state.targetDate\n        },\n        onSubmit: onSubmit,\n        validateOnChange: false,\n        validateOnBlur: false,\n        validate: validate,\n        enableReinitialize: true,\n        children: props => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"description\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"targetDate\",\n            component: \"div\",\n            className: \"alert alert-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"text\",\n              name: \"description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Target Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              className: \"form-control\",\n              type: \"date\",\n              name: \"targetDate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoComponent, \"BCo/O6Vy5cfksVOjkc5HEnFALQU=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = TodoComponent;\nexport default TodoComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoComponent\");","map":{"version":3,"sources":["/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/TodoComponent.js"],"names":["React","useState","useEffect","useParams","useNavigate","moment","Formik","Form","Field","ErrorMessage","AuthenticationService","TodoService","TodoComponent","id","console","log","state","setState","description","targetDate","Date","format","navigate","onSubmit","values","username","getLoggedInUserName","todo","createTodo","then","updateTodo","validate","errors","length","isValid","getTodo","response","data","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport AuthenticationService from \"./AuthenticationService\";\nimport TodoService from \"../../api/todo/TodoService\";\n\nfunction TodoComponent() {\n  const { id } = useParams();\n  console.log(id);\n\n  const [state, setState] = useState({\n    id: id,\n    description: \"Test\",\n    targetDate: moment(new Date()).format(\"YYYY-MM-DD\"),\n  });\n\n  const navigate = useNavigate();\n\n  const onSubmit = (values) => {\n    let username = AuthenticationService.getLoggedInUserName();\n\n    // let todo = {\n    //     id: state.id,\n    //     description: values.description,\n    //     targetDate: values.targetDate\n    // }\n\n    let todo = {};\n\n    if (state.id === -1) {\n      todo = {\n        description: values.description,\n        targetDate: values.targetDate,\n      };\n      TodoService.createTodo(username, todo).then(() => navigate(\"/todos\"));\n    } else {\n      todo = {\n        id: state.id,\n        description: values.description,\n        targetDate: values.targetDate,\n      };\n      TodoService.updateTodo(username, state.id, todo).then(() =>\n        navigate(\"/todos\")\n      );\n    }\n  };\n\n  const validate = (values) => {\n    let errors = {};\n    if (!values.description) {\n      errors.description = \"Enter a Description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter atleast 5 Characters in Description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid Target Date\";\n    }\n\n    return errors;\n  };\n\n  useEffect(() => {\n    if (id == -1) {\n      console.log(id);\n      return;\n    } else {\n      let username = AuthenticationService.getLoggedInUserName();\n\n      TodoService.getTodo(username, state.id).then((response) => {\n        setState({\n          ...state,\n          description: response.data.description,\n          targetDate: moment(response.data.targetDate).format(\"YYYY-MM-DD\"),\n        });\n      });\n    }\n  }, [id]);\n\n  return (\n    <div>\n      <h1>Todo</h1>\n      <div className=\"container\">\n        <Formik\n          initialValues={{\n            description: state.description,\n            targetDate: state.targetDate,\n          }}\n          onSubmit={onSubmit}\n          validateOnChange={false}\n          validateOnBlur={false}\n          validate={validate}\n          enableReinitialize={true}\n        >\n          {(props) => (\n            <Form>\n              <ErrorMessage\n                name=\"description\"\n                component=\"div\"\n                className=\"alert alert-warning\"\n              />\n              <ErrorMessage\n                name=\"targetDate\"\n                component=\"div\"\n                className=\"alert alert-warning\"\n              />\n              <fieldset className=\"form-group\">\n                <label>Description</label>\n                <Field\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"description\"\n                ></Field>\n              </fieldset>\n              <fieldset className=\"form-group\">\n                <label>Target Date</label>\n                <Field\n                  className=\"form-control\"\n                  type=\"date\"\n                  name=\"targetDate\"\n                ></Field>\n              </fieldset>\n              <button className=\"btn btn-success\" type=\"submit\">\n                Save\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n}\n\nexport default TodoComponent;\n"]},"metadata":{},"sourceType":"module"}