{"ast":null,"code":"import axios from \"axios\";\nimport { API_URL, API_JPA_URL } from \"./Constants\";\nexport const USER_NAME_SESSION_STORAGE_KEY = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_JPA_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executejwtAuthenticationService(username, password) {\n    return axios.post(`${API_JPA_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  loginSucceed(username, password) {\n    // let username = 'gaby'\n    // let password = 'hello123'\n    sessionStorage.setItem(USER_NAME_SESSION_STORAGE_KEY, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  loginSucceedForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_STORAGE_KEY, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_STORAGE_KEY);\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_STORAGE_KEY);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_STORAGE_KEY);\n    if (user === null) return '';\n    return user;\n  }\n\n  createBasicAuthToken(username, password) {\n    // console.log(username)\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLogin()) {\n        config.headers.authorization = token;\n      } // console.log(config)\n\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","API_JPA_URL","USER_NAME_SESSION_STORAGE_KEY","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executejwtAuthenticationService","post","loginSucceed","sessionStorage","setItem","setupAxiosInterceptors","loginSucceedForJwt","token","createJWTToken","logout","removeItem","isUserLogin","user","getItem","getLoggedInUserName","window","btoa","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AAEA,OAAO,MAAMC,6BAA6B,GAAG,mBAAtC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOP,KAAK,CAACQ,GAAN,CAAW,GAAEN,WAAY,YAAzB,EACH;AAAEO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOP,KAAK,CAACa,IAAN,CAAY,GAAEX,WAAY,eAA1B,EACH;AAAEI,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KADG,CAAP;AAEH;;AAEDO,EAAAA,YAAY,CAACR,QAAD,EAAWC,QAAX,EAAqB;AAC7B;AACA;AAEAQ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,6BAAvB,EAAsDG,QAAtD;AACA,SAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDW,EAAAA,kBAAkB,CAACZ,QAAD,EAAWa,KAAX,EAAkB;AAChCJ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,6BAAvB,EAAsDG,QAAtD;AACA,SAAKW,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0BnB,6BAA1B;AACH;;AAEDoB,EAAAA,WAAW,GAAG;AACV,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBtB,6BAAvB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAGDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBtB,6BAAvB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDb,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC;AACA,WAAO,WAAWoB,MAAM,CAACC,IAAP,CAAYtB,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDa,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDF,EAAAA,sBAAsB,CAACE,KAAD,EAAQ;AAC1BnB,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKT,WAAL,EAAJ,EAAwB;AACpBS,QAAAA,MAAM,CAACvB,OAAP,CAAeC,aAAf,GAA+BS,KAA/B;AACH,OAHO,CAIR;;;AACA,aAAOa,MAAP;AACH,KAPL;AASH;;AA7DuB;;AAiE5B,eAAe,IAAI5B,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport { API_URL, API_JPA_URL } from \"./Constants\";\n\nexport const USER_NAME_SESSION_STORAGE_KEY = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_JPA_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executejwtAuthenticationService(username, password) {\n        return axios.post(`${API_JPA_URL}/authenticate`,\n            { username, password })\n    }\n\n    loginSucceed(username, password) {\n        // let username = 'gaby'\n        // let password = 'hello123'\n\n        sessionStorage.setItem(USER_NAME_SESSION_STORAGE_KEY, username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    loginSucceedForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_STORAGE_KEY, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_STORAGE_KEY);\n    }\n\n    isUserLogin() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_STORAGE_KEY);\n        if (user === null) return false\n        return true\n    }\n\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_STORAGE_KEY);\n        if (user === null) return ''\n        return user\n    }\n\n    createBasicAuthToken(username, password) {\n        // console.log(username)\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLogin()) {\n                    config.headers.authorization = token\n                }\n                // console.log(config)\n                return config\n            }\n        )\n    }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}