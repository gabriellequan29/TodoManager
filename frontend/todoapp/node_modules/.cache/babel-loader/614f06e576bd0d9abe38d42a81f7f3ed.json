{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  loginSucceed(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'gaby';\n    let password = 'hello123';\n    let basicAuthHeader = 'Basic ' + window.btoa(`${username} + \":\" + ${password}`);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLogin()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/gabriellequan/Dev/TodoManager/frontend/todoapp/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","loginSucceed","username","password","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLogin","user","getItem","getLoggedInUserName","basicAuthHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,YAAY,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC7BC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACA,SAAKI,sBAAL;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,GAAG;AACrB,QAAIJ,QAAQ,GAAG,MAAf;AACA,QAAIC,QAAQ,GAAG,UAAf;AACA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAa,GAAEb,QAAS,YAAWC,QAAS,EAA5C,CAAjC;AACAJ,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKV,WAAL,EAAJ,EAAwB;AACpBU,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,eAA/B;AACH;;AACD,aAAOM,MAAP;AACH,KANL;AAQH;;AAnCuB;;AAuC5B,eAAe,IAAInB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass AuthenticationService {\n\n    loginSucceed(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors()\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLogin() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors() {\n        let username = 'gaby'\n        let password = 'hello123'\n        let basicAuthHeader = 'Basic ' + window.btoa(`${username} + \":\" + ${password}`)\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLogin()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }   \n        )\n    }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}